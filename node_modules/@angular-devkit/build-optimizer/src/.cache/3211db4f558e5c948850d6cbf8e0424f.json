{"remainingRequest":"/home/dendo/CODING/postmypage/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/dendo/CODING/postmypage/node_modules/@swimlane/ngx-ui/release/services/injection-registery.service.js","dependencies":[{"path":"/home/dendo/CODING/postmypage/node_modules/@swimlane/ngx-ui/release/services/injection-registery.service.js","mtime":1519007908000},{"path":"/home/dendo/CODING/postmypage/node_modules/cache-loader/dist/cjs.js","mtime":1562770612135},{"path":"/home/dendo/CODING/postmypage/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nvar InjectionRegisteryService = /*@__PURE__*/ (function () {\n    function InjectionRegisteryService(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    InjectionRegisteryService.prototype.getByType = function (type) {\n        if (type === void 0) {\n            type = this.type;\n        }\n        return this.components.get(type);\n    };\n    InjectionRegisteryService.prototype.create = function (bindings) {\n        return this.createByType(this.type, bindings);\n    };\n    InjectionRegisteryService.prototype.createByType = function (type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        var component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    };\n    InjectionRegisteryService.prototype.destroy = function (instance) {\n        var compsByType = this.components.get(instance.componentType);\n        if (compsByType && compsByType.length) {\n            var idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                var component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    };\n    InjectionRegisteryService.prototype.destroyAll = function () {\n        this.destroyByType(this.type);\n    };\n    InjectionRegisteryService.prototype.destroyByType = function (type) {\n        var comps = this.components.get(type);\n        if (comps && comps.length) {\n            var i = comps.length - 1;\n            while (i >= 0) {\n                this.destroy(comps[i--]);\n            }\n        }\n    };\n    InjectionRegisteryService.prototype.injectComponent = function (type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    };\n    InjectionRegisteryService.prototype.assignDefaults = function (bindings) {\n        var inputs = __assign({}, this.defaults.inputs);\n        var outputs = __assign({}, this.defaults.outputs);\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = __assign({}, inputs, bindings.inputs);\n        }\n        if (outputs) {\n            bindings.outputs = __assign({}, outputs, bindings.outputs);\n        }\n        return bindings;\n    };\n    InjectionRegisteryService.prototype.register = function (type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        var types = this.components.get(type);\n        types.push(component);\n    };\n    return InjectionRegisteryService;\n}());\nexport { InjectionRegisteryService };\n//# sourceMappingURL=injection-registery.service.js.map \n",null]}