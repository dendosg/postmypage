{"remainingRequest":"/home/dendo/CODING/postmypage/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/dendo/CODING/postmypage/node_modules/angular-bootstrap-datetimepicker/esm5/angular-bootstrap-datetimepicker.js","dependencies":[{"path":"/home/dendo/CODING/postmypage/node_modules/angular-bootstrap-datetimepicker/esm5/angular-bootstrap-datetimepicker.js","mtime":1523204559000},{"path":"/home/dendo/CODING/postmypage/node_modules/cache-loader/dist/cjs.js","mtime":1562770612135},{"path":"/home/dendo/CODING/postmypage/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from 'tslib';\nimport * as _moment from 'moment';\nimport { Inject, InjectionToken, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, NgZone, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { take } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nvar DlDateAdapter = /*@__PURE__*/ (function () {\n    function DlDateAdapter() {\n    }\n    return DlDateAdapter;\n}());\nvar moment = _moment;\nvar DlDateAdapterMoment = /*@__PURE__*/ (function (_super) {\n    __extends(DlDateAdapterMoment, _super);\n    function DlDateAdapterMoment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DlDateAdapterMoment.prototype.fromMilliseconds = function (milliseconds) {\n        return moment(milliseconds);\n    };\n    DlDateAdapterMoment.prototype.toMilliseconds = function (value) {\n        return (value) ? value.valueOf() : undefined;\n    };\n    return DlDateAdapterMoment;\n}(DlDateAdapter));\nvar DlDateAdapterNative = /*@__PURE__*/ (function (_super) {\n    __extends(DlDateAdapterNative, _super);\n    function DlDateAdapterNative() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DlDateAdapterNative.prototype.fromMilliseconds = function (milliseconds) {\n        return new Date(milliseconds);\n    };\n    DlDateAdapterNative.prototype.toMilliseconds = function (value) {\n        return (value) ? value.getTime() : undefined;\n    };\n    return DlDateAdapterNative;\n}(DlDateAdapter));\nvar DlDateAdapterNumber = /*@__PURE__*/ (function (_super) {\n    __extends(DlDateAdapterNumber, _super);\n    function DlDateAdapterNumber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DlDateAdapterNumber.prototype.fromMilliseconds = function (milliseconds) {\n        return milliseconds;\n    };\n    DlDateAdapterNumber.prototype.toMilliseconds = function (value) {\n        return value;\n    };\n    return DlDateAdapterNumber;\n}(DlDateAdapter));\nvar moment$1 = _moment;\nvar DL_STRING_DATE_OUTPUT_FORMAT = new InjectionToken('DL_STRING_DATE_OUTPUT_FORMAT');\nvar DL_STRING_DATE_INPUT_FORMATS = new InjectionToken('DL_STRING_DATE_INPUT_FORMATS');\nvar DlDateAdapterString = /*@__PURE__*/ (function (_super) {\n    __extends(DlDateAdapterString, _super);\n    function DlDateAdapterString(inputFormats, modelFormat) {\n        var _this = _super.call(this) || this;\n        _this.inputFormats = inputFormats;\n        _this.modelFormat = modelFormat;\n        return _this;\n    }\n    DlDateAdapterString.prototype.fromMilliseconds = function (milliseconds) {\n        return moment$1(milliseconds).format(this.modelFormat);\n    };\n    DlDateAdapterString.prototype.toMilliseconds = function (value) {\n        if (value !== undefined && value !== null) {\n            var newMoment = moment$1(value, this.inputFormats, true);\n            return newMoment.isValid() ? newMoment.valueOf() : undefined;\n        }\n    };\n    return DlDateAdapterString;\n}(DlDateAdapter));\nvar DlDateTimePickerChange = /*@__PURE__*/ (function () {\n    function DlDateTimePickerChange(newValue) {\n        this._value = newValue;\n    }\n    Object.defineProperty(DlDateTimePickerChange.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DlDateTimePickerChange;\n}());\nvar moment$2 = _moment;\nvar DlYearModelProvider = /*@__PURE__*/ (function () {\n    function DlYearModelProvider() {\n    }\n    DlYearModelProvider.getStartOfDecade = function (fromMilliseconds) {\n        var startDecade = (Math.trunc(moment$2(fromMilliseconds).year() / 10) * 10);\n        return moment$2({ year: startDecade }).startOf('year');\n    };\n    DlYearModelProvider.prototype.onChanges = function (changes) {\n    };\n    DlYearModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {\n        var rowNumbers = [0, 1];\n        var columnNumbers = [0, 1, 2, 3, 4];\n        var startYear = moment$2(milliseconds).startOf('year');\n        var startDate = DlYearModelProvider.getStartOfDecade(milliseconds);\n        var futureYear = startDate.year() + 9;\n        var pastYear = startDate.year();\n        var activeValue = startYear.valueOf();\n        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n            ? selectedMilliseconds\n            : moment$2(selectedMilliseconds).startOf('year').valueOf();\n        var result = {\n            viewName: 'year',\n            viewLabel: pastYear + \"-\" + futureYear,\n            activeDate: activeValue,\n            leftButton: {\n                value: moment$2(startDate).subtract(10, 'years').valueOf(),\n                ariaLabel: \"Go to \" + (pastYear - 10) + \"-\" + (pastYear - 1),\n                classes: {},\n            },\n            rightButton: {\n                value: moment$2(startDate).add(10, 'years').valueOf(),\n                ariaLabel: \"Go to \" + (futureYear + 1) + \"-\" + (futureYear + 10),\n                classes: {},\n            },\n            rows: rowNumbers.map(rowOfYears.bind(this))\n        };\n        result.leftButton.classes[\"\" + result.leftButton.value] = true;\n        result.rightButton.classes[\"\" + result.rightButton.value] = true;\n        return result;\n        function rowOfYears(rowNumber) {\n            var currentMoment = moment$2();\n            var cells = columnNumbers.map(function (columnNumber) {\n                var yearMoment = moment$2(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'years');\n                return {\n                    display: yearMoment.format('YYYY'),\n                    value: yearMoment.valueOf(),\n                    classes: {\n                        'dl-abdtp-active': activeValue === yearMoment.valueOf(),\n                        'dl-abdtp-selected': selectedValue === yearMoment.valueOf(),\n                        'dl-abdtp-now': yearMoment.isSame(currentMoment, 'year'),\n                    }\n                };\n            });\n            return { cells: cells };\n        }\n    };\n    DlYearModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$2(fromMilliseconds).add(5, 'year').valueOf(), selectedMilliseconds);\n    };\n    DlYearModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$2(fromMilliseconds).subtract(5, 'year').valueOf(), selectedMilliseconds);\n    };\n    DlYearModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$2(fromMilliseconds).subtract(1, 'year').valueOf(), selectedMilliseconds);\n    };\n    DlYearModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$2(fromMilliseconds).add(1, 'year').valueOf(), selectedMilliseconds);\n    };\n    DlYearModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$2(fromMilliseconds).add(10, 'year').valueOf(), selectedMilliseconds);\n    };\n    DlYearModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$2(fromMilliseconds).subtract(10, 'year').valueOf(), selectedMilliseconds);\n    };\n    DlYearModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(DlYearModelProvider.getStartOfDecade(fromMilliseconds)\n            .add(9, 'years')\n            .endOf('year')\n            .valueOf(), selectedMilliseconds);\n    };\n    DlYearModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(DlYearModelProvider.getStartOfDecade(fromMilliseconds)\n            .startOf('year')\n            .valueOf(), selectedMilliseconds);\n    };\n    return DlYearModelProvider;\n}());\nvar moment$3 = _moment;\nvar DlMonthModelProvider = /*@__PURE__*/ (function () {\n    function DlMonthModelProvider() {\n    }\n    DlMonthModelProvider.prototype.onChanges = function (changes) {\n    };\n    DlMonthModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {\n        var startDate = moment$3(milliseconds).startOf('year');\n        var rowNumbers = [0, 1, 2];\n        var columnNumbers = [0, 1, 2, 3];\n        var previousYear = moment$3(startDate).subtract(1, 'year');\n        var nextYear = moment$3(startDate).add(1, 'year');\n        var activeValue = moment$3(milliseconds).startOf('month').valueOf();\n        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n            ? selectedMilliseconds\n            : moment$3(selectedMilliseconds).startOf('month').valueOf();\n        var result = {\n            viewName: 'month',\n            viewLabel: startDate.format('YYYY'),\n            activeDate: activeValue,\n            leftButton: {\n                value: previousYear.valueOf(),\n                ariaLabel: \"Go to \" + previousYear.format('YYYY'),\n                classes: {},\n            },\n            upButton: {\n                value: startDate.valueOf(),\n                ariaLabel: \"Go to \" + startDate.format('YYYY'),\n                classes: {},\n            },\n            rightButton: {\n                value: nextYear.valueOf(),\n                ariaLabel: \"Go to \" + nextYear.format('YYYY'),\n                classes: {},\n            },\n            rows: rowNumbers.map(rowOfMonths)\n        };\n        result.leftButton.classes[\"\" + result.leftButton.value] = true;\n        result.rightButton.classes[\"\" + result.rightButton.value] = true;\n        return result;\n        function rowOfMonths(rowNumber) {\n            var currentMoment = moment$3();\n            var cells = columnNumbers.map(function (columnNumber) {\n                var monthMoment = moment$3(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'months');\n                return {\n                    display: monthMoment.format('MMM'),\n                    ariaLabel: monthMoment.format('MMM YYYY'),\n                    value: monthMoment.valueOf(),\n                    classes: {\n                        'dl-abdtp-active': activeValue === monthMoment.valueOf(),\n                        'dl-abdtp-selected': selectedValue === monthMoment.valueOf(),\n                        'dl-abdtp-now': monthMoment.isSame(currentMoment, 'month'),\n                    }\n                };\n            });\n            return { cells: cells };\n        }\n    };\n    DlMonthModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$3(fromMilliseconds).add(4, 'month').valueOf(), selectedMilliseconds);\n    };\n    DlMonthModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$3(fromMilliseconds).subtract(4, 'month').valueOf(), selectedMilliseconds);\n    };\n    DlMonthModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$3(fromMilliseconds).subtract(1, 'month').valueOf(), selectedMilliseconds);\n    };\n    DlMonthModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$3(fromMilliseconds).add(1, 'month').valueOf(), selectedMilliseconds);\n    };\n    DlMonthModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$3(fromMilliseconds).add(12, 'months').valueOf(), selectedMilliseconds);\n    };\n    DlMonthModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$3(fromMilliseconds).subtract(12, 'months').valueOf(), selectedMilliseconds);\n    };\n    DlMonthModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$3(fromMilliseconds).endOf('year').valueOf(), selectedMilliseconds);\n    };\n    DlMonthModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$3(fromMilliseconds).startOf('year').valueOf(), selectedMilliseconds);\n    };\n    return DlMonthModelProvider;\n}());\nvar moment$4 = _moment;\nvar DlDayModelProvider = /*@__PURE__*/ (function () {\n    function DlDayModelProvider() {\n    }\n    DlDayModelProvider.prototype.onChanges = function (changes) {\n    };\n    DlDayModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {\n        var startOfMonth = moment$4(milliseconds).startOf('month');\n        var endOfMonth = moment$4(milliseconds).endOf('month');\n        var startOfView = moment$4(startOfMonth).subtract(Math.abs(startOfMonth.weekday()), 'days');\n        var rowNumbers = [0, 1, 2, 3, 4, 5];\n        var columnNumbers = [0, 1, 2, 3, 4, 5, 6];\n        var previousMonth = moment$4(startOfMonth).subtract(1, 'month');\n        var nextMonth = moment$4(startOfMonth).add(1, 'month');\n        var activeValue = moment$4(milliseconds).startOf('day').valueOf();\n        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n            ? selectedMilliseconds\n            : moment$4(selectedMilliseconds).startOf('day').valueOf();\n        var result = {\n            viewName: 'day',\n            viewLabel: startOfMonth.format('MMM YYYY'),\n            activeDate: activeValue,\n            leftButton: {\n                value: previousMonth.valueOf(),\n                ariaLabel: \"Go to \" + previousMonth.format('MMM YYYY'),\n                classes: {},\n            },\n            upButton: {\n                value: startOfMonth.valueOf(),\n                ariaLabel: \"Go to month view\",\n                classes: {},\n            },\n            rightButton: {\n                value: nextMonth.valueOf(),\n                ariaLabel: \"Go to \" + nextMonth.format('MMM YYYY'),\n                classes: {},\n            },\n            rowLabels: columnNumbers.map(function (column) { return moment$4().weekday(column).format('dd'); }),\n            rows: rowNumbers.map(rowOfDays)\n        };\n        result.leftButton.classes[\"\" + result.leftButton.value] = true;\n        result.rightButton.classes[\"\" + result.rightButton.value] = true;\n        return result;\n        function rowOfDays(rowNumber) {\n            var currentMoment = moment$4();\n            var cells = columnNumbers.map(function (columnNumber) {\n                var dayMoment = moment$4(startOfView).add((rowNumber * columnNumbers.length) + columnNumber, 'days');\n                return {\n                    display: dayMoment.format('D'),\n                    ariaLabel: dayMoment.format('ll'),\n                    value: dayMoment.valueOf(),\n                    classes: {\n                        'dl-abdtp-active': activeValue === dayMoment.valueOf(),\n                        'dl-abdtp-future': dayMoment.isAfter(endOfMonth),\n                        'dl-abdtp-past': dayMoment.isBefore(startOfMonth),\n                        'dl-abdtp-selected': selectedValue === dayMoment.valueOf(),\n                        'dl-abdtp-now': dayMoment.isSame(currentMoment, 'day'),\n                    }\n                };\n            });\n            return { cells: cells };\n        }\n    };\n    DlDayModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$4(fromMilliseconds).add(7, 'days').valueOf(), selectedMilliseconds);\n    };\n    DlDayModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$4(fromMilliseconds).subtract(7, 'days').valueOf(), selectedMilliseconds);\n    };\n    DlDayModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$4(fromMilliseconds).subtract(1, 'day').valueOf(), selectedMilliseconds);\n    };\n    DlDayModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$4(fromMilliseconds).add(1, 'day').valueOf(), selectedMilliseconds);\n    };\n    DlDayModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$4(fromMilliseconds).add(1, 'month').valueOf(), selectedMilliseconds);\n    };\n    DlDayModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$4(fromMilliseconds).subtract(1, 'month').valueOf(), selectedMilliseconds);\n    };\n    DlDayModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$4(fromMilliseconds)\n            .endOf('month').startOf('day').valueOf(), selectedMilliseconds);\n    };\n    DlDayModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$4(fromMilliseconds).startOf('month').valueOf(), selectedMilliseconds);\n    };\n    return DlDayModelProvider;\n}());\nvar moment$5 = _moment;\nvar DlHourModelProvider = /*@__PURE__*/ (function () {\n    function DlHourModelProvider() {\n    }\n    DlHourModelProvider.prototype.onChanges = function (changes) {\n    };\n    DlHourModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {\n        var startDate = moment$5(milliseconds).startOf('day');\n        var rowNumbers = [0, 1, 2, 3, 4, 5];\n        var columnNumbers = [0, 1, 2, 3];\n        var previousDay = moment$5(startDate).subtract(1, 'day');\n        var nextDay = moment$5(startDate).add(1, 'day');\n        var activeValue = moment$5(milliseconds).startOf('hour').valueOf();\n        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n            ? selectedMilliseconds\n            : moment$5(selectedMilliseconds).startOf('hour').valueOf();\n        var result = {\n            viewName: 'hour',\n            viewLabel: startDate.format('ll'),\n            activeDate: activeValue,\n            leftButton: {\n                value: previousDay.valueOf(),\n                ariaLabel: \"Go to \" + previousDay.format('ll'),\n                classes: {},\n            },\n            upButton: {\n                value: startDate.valueOf(),\n                ariaLabel: \"Go to \" + startDate.format('MMM YYYY'),\n                classes: {},\n            },\n            rightButton: {\n                value: nextDay.valueOf(),\n                ariaLabel: \"Go to \" + nextDay.format('ll'),\n                classes: {},\n            },\n            rows: rowNumbers.map(rowOfHours)\n        };\n        result.leftButton.classes[\"\" + result.leftButton.value] = true;\n        result.rightButton.classes[\"\" + result.rightButton.value] = true;\n        return result;\n        function rowOfHours(rowNumber) {\n            var currentMoment = moment$5();\n            var cells = columnNumbers.map(function (columnNumber) {\n                var hourMoment = moment$5(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'hours');\n                return {\n                    display: hourMoment.format('LT'),\n                    ariaLabel: hourMoment.format('LLL'),\n                    value: hourMoment.valueOf(),\n                    classes: {\n                        'dl-abdtp-active': activeValue === hourMoment.valueOf(),\n                        'dl-abdtp-selected': selectedValue === hourMoment.valueOf(),\n                        'dl-abdtp-now': hourMoment.isSame(currentMoment, 'hour'),\n                    }\n                };\n            });\n            return { cells: cells };\n        }\n    };\n    DlHourModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$5(fromMilliseconds).add(4, 'hour').valueOf(), selectedMilliseconds);\n    };\n    DlHourModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$5(fromMilliseconds).subtract(4, 'hour').valueOf(), selectedMilliseconds);\n    };\n    DlHourModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$5(fromMilliseconds).subtract(1, 'hour').valueOf(), selectedMilliseconds);\n    };\n    DlHourModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$5(fromMilliseconds).add(1, 'hour').valueOf(), selectedMilliseconds);\n    };\n    DlHourModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$5(fromMilliseconds).add(1, 'day').valueOf(), selectedMilliseconds);\n    };\n    DlHourModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$5(fromMilliseconds).subtract(1, 'day').valueOf(), selectedMilliseconds);\n    };\n    DlHourModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$5(fromMilliseconds)\n            .endOf('day')\n            .startOf('hour')\n            .valueOf(), selectedMilliseconds);\n    };\n    DlHourModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$5(fromMilliseconds).startOf('day').valueOf(), selectedMilliseconds);\n    };\n    return DlHourModelProvider;\n}());\nvar moment$6 = _moment;\nvar DlMinuteModelProvider = /*@__PURE__*/ (function () {\n    function DlMinuteModelProvider() {\n        this.step = 5;\n    }\n    DlMinuteModelProvider.prototype.onChanges = function (changes) {\n        var minuteStepChange = changes['minuteStep'];\n        if (minuteStepChange\n            && (minuteStepChange.previousValue !== minuteStepChange.currentValue)) {\n            this.step = minuteStepChange.currentValue;\n            if (this.step === null || this.step === undefined) {\n                this.step = 5;\n            }\n        }\n    };\n    DlMinuteModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {\n        var _this = this;\n        var startDate = moment$6(milliseconds).startOf('hour');\n        var currentMilliseconds = moment$6().valueOf();\n        var minuteSteps = new Array(Math.ceil(60 / this.step)).fill(0).map(function (value, index) { return index * _this.step; });\n        var minuteValues = minuteSteps.map(function (minutesToAdd) { return moment$6(startDate).add(minutesToAdd, 'minutes').valueOf(); });\n        var activeValue = moment$6(minuteValues.filter(function (value) { return value <= milliseconds; }).pop()).valueOf();\n        var nowValue = currentMilliseconds >= startDate.valueOf() && currentMilliseconds <= moment$6(startDate).endOf('hour').valueOf()\n            ? moment$6(minuteValues.filter(function (value) { return value <= currentMilliseconds; }).pop()).valueOf()\n            : null;\n        var previousHour = moment$6(startDate).subtract(1, 'hour');\n        var nextHour = moment$6(startDate).add(1, 'hour');\n        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n            ? selectedMilliseconds\n            : moment$6(minuteValues.filter(function (value) { return value <= selectedMilliseconds; }).pop()).valueOf();\n        var rows = new Array(Math.ceil(minuteSteps.length / 4))\n            .fill(0)\n            .map(function (value, index) { return index; })\n            .map(function (value) {\n            return { cells: minuteSteps.slice((value * 4), (value * 4) + 4).map(rowOfMinutes) };\n        });\n        var result = {\n            viewName: 'minute',\n            viewLabel: startDate.format('lll'),\n            activeDate: activeValue,\n            leftButton: {\n                value: previousHour.valueOf(),\n                ariaLabel: \"Go to \" + previousHour.format('lll'),\n                classes: {},\n            },\n            upButton: {\n                value: startDate.valueOf(),\n                ariaLabel: \"Go to \" + startDate.format('ll'),\n                classes: {},\n            },\n            rightButton: {\n                value: nextHour.valueOf(),\n                ariaLabel: \"Go to \" + nextHour.format('lll'),\n                classes: {},\n            },\n            rows: rows\n        };\n        result.leftButton.classes[\"\" + result.leftButton.value] = true;\n        result.rightButton.classes[\"\" + result.rightButton.value] = true;\n        return result;\n        function rowOfMinutes(stepMinutes) {\n            var minuteMoment = moment$6(startDate).add(stepMinutes, 'minutes');\n            return {\n                display: minuteMoment.format('LT'),\n                ariaLabel: minuteMoment.format('LLL'),\n                value: minuteMoment.valueOf(),\n                classes: {\n                    'dl-abdtp-active': activeValue === minuteMoment.valueOf(),\n                    'dl-abdtp-selected': selectedValue === minuteMoment.valueOf(),\n                    'dl-abdtp-now': nowValue === minuteMoment.valueOf(),\n                }\n            };\n        }\n    };\n    DlMinuteModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$6(fromMilliseconds).add(this.step * 4, 'minutes').valueOf(), selectedMilliseconds);\n    };\n    DlMinuteModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$6(fromMilliseconds).subtract(this.step * 4, 'minutes').valueOf(), selectedMilliseconds);\n    };\n    DlMinuteModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$6(fromMilliseconds).subtract(this.step, 'minutes').valueOf(), selectedMilliseconds);\n    };\n    DlMinuteModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$6(fromMilliseconds).add(this.step, 'minutes').valueOf(), selectedMilliseconds);\n    };\n    DlMinuteModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$6(fromMilliseconds).add(1, 'hour').valueOf(), selectedMilliseconds);\n    };\n    DlMinuteModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$6(fromMilliseconds).subtract(1, 'hour').valueOf(), selectedMilliseconds);\n    };\n    DlMinuteModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$6(fromMilliseconds)\n            .endOf('hour')\n            .valueOf(), selectedMilliseconds);\n    };\n    DlMinuteModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {\n        return this.getModel(moment$6(fromMilliseconds).startOf('hour').valueOf(), selectedMilliseconds);\n    };\n    return DlMinuteModelProvider;\n}());\nvar moment$7 = _moment;\nvar keyCodeToModelProviderMethod = {\n    33: 'pageUp',\n    34: 'pageDown',\n    35: 'goEnd',\n    36: 'goHome',\n    37: 'goLeft',\n    38: 'goUp',\n    39: 'goRight',\n    40: 'goDown',\n};\nvar VIEWS = [\n    'minute',\n    'hour',\n    'day',\n    'month',\n    'year'\n];\nvar DlDateTimePickerComponent = /*@__PURE__*/ (function () {\n    function DlDateTimePickerComponent(_elementRef, _ngZone, _dateAdapter, yearModelComponent, monthModelComponent, dayModelComponent, hourModelComponent, minuteModelComponent) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._dateAdapter = _dateAdapter;\n        this.yearModelComponent = yearModelComponent;\n        this.monthModelComponent = monthModelComponent;\n        this.dayModelComponent = dayModelComponent;\n        this.hourModelComponent = hourModelComponent;\n        this.minuteModelComponent = minuteModelComponent;\n        this.leftIconClass = [\n            'oi',\n            'oi-chevron-left'\n        ];\n        this.maxView = 'year';\n        this.minuteStep = 5;\n        this.minView = 'minute';\n        this.rightIconClass = [\n            'oi',\n            'oi-chevron-right'\n        ];\n        this.startView = 'day';\n        this.upIconClass = [\n            'oi',\n            'oi-chevron-top'\n        ];\n        this.change = new EventEmitter();\n        this._changed = [];\n        this._nextView = {\n            'year': 'month',\n            'month': 'day',\n            'day': 'hour',\n            'hour': 'minute'\n        };\n        this._previousView = {\n            'minute': 'hour',\n            'hour': 'day',\n            'day': 'month',\n            'month': 'year'\n        };\n        this._touched = [];\n        this.selectFilter = function () { return true; };\n        this._viewToModelProvider = {\n            year: yearModelComponent,\n            month: monthModelComponent,\n            day: dayModelComponent,\n            hour: hourModelComponent,\n            minute: minuteModelComponent,\n        };\n    }\n    DlDateTimePickerComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        Object.keys(this._viewToModelProvider)\n            .map(function (key) { return _this._viewToModelProvider[key]; })\n            .forEach(function (provider) { return provider.onChanges(changes); });\n        if (this._model) {\n            this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.activeDate, this.valueOf);\n        }\n    };\n    DlDateTimePickerComponent.prototype.ngOnInit = function () {\n        this.model = this._viewToModelProvider[this.getStartView()].getModel(this.getStartDate(), this.valueOf);\n    };\n    DlDateTimePickerComponent.prototype._onDateClick = function (dateButton) {\n        if (dateButton.classes['dl-abdtp-disabled']) {\n            return;\n        }\n        var nextView = this._nextView[this._model.viewName];\n        if ((this.minView || 'minute') === this._model.viewName) {\n            this.value = this._dateAdapter.fromMilliseconds(dateButton.value);\n            nextView = this.startView;\n        }\n        this.model = this._viewToModelProvider[nextView].getModel(dateButton.value, this.valueOf);\n        this.onTouch();\n    };\n    DlDateTimePickerComponent.prototype._onLeftClick = function () {\n        this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.leftButton.value, this.valueOf);\n        this.onTouch();\n    };\n    DlDateTimePickerComponent.prototype._onUpClick = function () {\n        this.model = this._viewToModelProvider[this._previousView[this._model.viewName]].getModel(this._model.upButton.value, this.valueOf);\n    };\n    DlDateTimePickerComponent.prototype._onRightClick = function () {\n        this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.rightButton.value, this.valueOf);\n        this.onTouch();\n    };\n    DlDateTimePickerComponent.prototype._handleKeyDown = function ($event) {\n        var functionName = keyCodeToModelProviderMethod[$event.keyCode];\n        if (functionName) {\n            var modelProvider = this._viewToModelProvider[this._model.viewName];\n            this.model = modelProvider[functionName](this._model.activeDate, this.valueOf);\n            this.focusActiveCell();\n            $event.preventDefault();\n        }\n    };\n    DlDateTimePickerComponent.prototype.applySelectFilter = function (model) {\n        var _this = this;\n        if (this.selectFilter) {\n            model.rows = model.rows.map(function (row) {\n                row.cells.map(function (dateButton) {\n                    var disabled = !_this.selectFilter(dateButton, model.viewName);\n                    dateButton.classes['dl-abdtp-disabled'] = disabled;\n                    if (disabled) {\n                        dateButton.classes['aria-disabled'] = true;\n                    }\n                    return dateButton;\n                });\n                return row;\n            });\n        }\n        return model;\n    };\n    DlDateTimePickerComponent.prototype.focusActiveCell = function () {\n        var _this = this;\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n                _this._elementRef.nativeElement.querySelector('.dl-abdtp-active').focus();\n            });\n        });\n    };\n    DlDateTimePickerComponent.prototype.getStartDate = function () {\n        if (hasValue(this._value)) {\n            return this._dateAdapter.toMilliseconds(this._value);\n        }\n        if (hasValue(this.startDate)) {\n            return this.startDate;\n        }\n        return moment$7().valueOf();\n    };\n    DlDateTimePickerComponent.prototype.getStartView = function () {\n        var startIndex = Math.max(VIEWS.indexOf(this.minView || 'minute'), VIEWS.indexOf(this.startView || 'day'));\n        return VIEWS[startIndex];\n    };\n    Object.defineProperty(DlDateTimePickerComponent.prototype, \"model\", {\n        set: function (model) {\n            this._model = this.applySelectFilter(model);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DlDateTimePickerComponent.prototype.onTouch = function () {\n        this._touched.forEach(function (onTouch) { return onTouch(); });\n    };\n    DlDateTimePickerComponent.prototype.registerOnChange = function (fn) {\n        this._changed.push(fn);\n    };\n    DlDateTimePickerComponent.prototype.registerOnTouched = function (fn) {\n        this._touched.push(fn);\n    };\n    Object.defineProperty(DlDateTimePickerComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        set: function (value) {\n            if (this._value !== value) {\n                this._value = value;\n                this.model = this._viewToModelProvider[this._model.viewName].getModel(this.getStartDate(), this.valueOf);\n                this._changed.forEach(function (f) { return f(value); });\n                this.change.emit(new DlDateTimePickerChange(value));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DlDateTimePickerComponent.prototype, \"valueOf\", {\n        get: function () {\n            return this._dateAdapter.toMilliseconds(this._value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DlDateTimePickerComponent.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    return DlDateTimePickerComponent;\n}());\nfunction hasValue(value) {\n    return (typeof value !== 'undefined') && (value !== null);\n}\nvar moment$8 = _moment;\nvar LONG_DATE_FORMAT = moment$8.localeData().longDateFormat('lll');\nvar INPUT_FORMATS = [\n    'YYYY-MM-DDTHH:mm',\n    'YYYY-MM-DDTHH:mm:ss',\n    'YYYY-MM-DDTHH:mm:ss.SSS',\n    'YYYY-MM-DD',\n    LONG_DATE_FORMAT,\n    moment$8.ISO_8601\n];\nvar DlDateTimePickerModule = /*@__PURE__*/ (function () {\n    function DlDateTimePickerModule() {\n    }\n    return DlDateTimePickerModule;\n}());\nvar DlDateTimePickerNumberModule = /*@__PURE__*/ (function () {\n    function DlDateTimePickerNumberModule() {\n    }\n    return DlDateTimePickerNumberModule;\n}());\nvar DlDateTimePickerDateModule = /*@__PURE__*/ (function () {\n    function DlDateTimePickerDateModule() {\n    }\n    return DlDateTimePickerDateModule;\n}());\nvar DlDateTimePickerMomentModule = /*@__PURE__*/ (function () {\n    function DlDateTimePickerMomentModule() {\n    }\n    return DlDateTimePickerMomentModule;\n}());\nvar DlDateTimePickerStringModule = /*@__PURE__*/ (function () {\n    function DlDateTimePickerStringModule() {\n    }\n    return DlDateTimePickerStringModule;\n}());\nexport { DlDateAdapter, DlDateAdapterMoment, DlDateAdapterNative, DlDateAdapterNumber, DL_STRING_DATE_OUTPUT_FORMAT, DL_STRING_DATE_INPUT_FORMATS, DlDateAdapterString, DlDateTimePickerChange, DlDateTimePickerComponent, LONG_DATE_FORMAT, INPUT_FORMATS, DlDateTimePickerModule, DlDateTimePickerNumberModule, DlDateTimePickerDateModule, DlDateTimePickerMomentModule, DlDateTimePickerStringModule, DlDayModelProvider, DlHourModelProvider, DlMinuteModelProvider, DlMonthModelProvider, DlYearModelProvider };\n//# sourceMappingURL=angular-bootstrap-datetimepicker.js.map\n",null]}